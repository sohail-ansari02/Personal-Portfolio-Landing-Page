{
  "version": 3,
  "sources": ["../../../../../node_modules/@omnedia/ngx-flickering-grid/fesm2022/omnedia-ngx-flickering-grid.mjs"],
  "sourcesContent": ["import * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ViewChild, Input } from '@angular/core';\nconst _c0 = [\"OmFlickeringGridBackground\"];\nconst _c1 = [\"OmFlickeringGridCanvas\"];\nconst _c2 = [\"*\"];\nclass NgxFlickeringGridComponent {\n  background;\n  canvas;\n  styleClass;\n  squareSize = 4;\n  gridGap = 6;\n  flickerChance = 0.3;\n  color = \"#6B7280\";\n  maxOpacity = 0.3;\n  intersectionObserver;\n  ctx;\n  cols = 0;\n  rows = 0;\n  squares;\n  lastAnimationTime = 0;\n  animationFrameId;\n  memoizedColor = \"rgba(0, 0, 0,\";\n  isInView = false;\n  animating = false;\n  ngAfterViewInit() {\n    this.initCanvas();\n    this.intersectionObserver = new IntersectionObserver(([entry]) => {\n      this.renderContents(entry.isIntersecting);\n    });\n    this.intersectionObserver.observe(this.canvas.nativeElement);\n  }\n  ngOnDestroy() {\n    window.removeEventListener(\"resize\", () => this.setCanvasSize());\n    if (this.intersectionObserver) {\n      this.intersectionObserver.disconnect();\n    }\n    if (this.animationFrameId) {\n      cancelAnimationFrame(this.animationFrameId);\n    }\n  }\n  renderContents(isIntersecting) {\n    if (isIntersecting && !this.isInView) {\n      this.isInView = true;\n      if (!this.animating) {\n        this.animationFrameId = requestAnimationFrame(time => this.animateCanvas(time));\n      }\n    } else if (!isIntersecting) {\n      this.isInView = false;\n    }\n  }\n  initCanvas() {\n    this.setCanvasSize();\n    this.setMemoizedColor();\n    window.addEventListener(\"resize\", () => this.setCanvasSize());\n    if (!this.animating) {\n      this.animationFrameId = requestAnimationFrame(time => this.animateCanvas(time));\n    }\n  }\n  setMemoizedColor() {\n    if (typeof window === \"undefined\") {\n      this.memoizedColor = `rgba(0, 0, 0,`;\n      return;\n    }\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = canvas.height = 1;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n      this.memoizedColor = `rgba(0, 0, 0,`;\n      return;\n    }\n    ctx.fillStyle = this.color;\n    ctx.fillRect(0, 0, 1, 1);\n    const [r, g, b] = ctx.getImageData(0, 0, 1, 1).data;\n    this.memoizedColor = `rgba(${r}, ${g}, ${b},`;\n    return;\n  }\n  animateCanvas(time) {\n    if (!this.isInView) {\n      this.animating = false;\n      return;\n    }\n    this.animating = true;\n    const deltaTime = (time - this.lastAnimationTime) / 1000;\n    this.lastAnimationTime = time;\n    this.updateSquares(deltaTime);\n    this.drawGrid();\n    this.animationFrameId = requestAnimationFrame(time => this.animateCanvas(time));\n  }\n  setCanvasSize() {\n    this.canvas.nativeElement.width = this.background.nativeElement.getBoundingClientRect().width + 50;\n    this.canvas.nativeElement.height = this.background.nativeElement.getBoundingClientRect().height + 50;\n    this.setupCanvas();\n    this.ctx = this.canvas.nativeElement.getContext(\"2d\");\n  }\n  setupCanvas() {\n    this.cols = Math.floor(this.canvas.nativeElement.width / (this.squareSize + this.gridGap));\n    this.rows = Math.floor(this.canvas.nativeElement.height / (this.squareSize + this.gridGap));\n    this.squares = new Float32Array(this.cols * this.rows);\n    for (let i = 0; i < this.squares.length; i++) {\n      this.squares[i] = Math.random() * this.maxOpacity;\n    }\n  }\n  updateSquares(deltaTime) {\n    if (!this.squares) {\n      return;\n    }\n    for (let i = 0; i < this.squares.length; i++) {\n      if (Math.random() < this.flickerChance * deltaTime) {\n        this.squares[i] = Math.random() * this.maxOpacity;\n      }\n    }\n  }\n  drawGrid() {\n    if (!this.squares) {\n      return;\n    }\n    this.ctx.clearRect(0, 0, this.canvas.nativeElement.width, this.canvas.nativeElement.height);\n    this.ctx.fillStyle = \"transparent\";\n    this.ctx.fillRect(0, 0, this.canvas.nativeElement.width, this.canvas.nativeElement.height);\n    const [r, g, b] = this.ctx.getImageData(0, 0, 1, 1).data;\n    for (let i = 0; i < this.cols; i++) {\n      for (let j = 0; j < this.rows; j++) {\n        const opacity = this.squares[i * this.rows + j];\n        this.ctx.fillStyle = `${this.memoizedColor}${opacity})`;\n        this.ctx.fillRect(i * (this.squareSize + this.gridGap), j * (this.squareSize + this.gridGap), this.squareSize, this.squareSize);\n      }\n    }\n  }\n  static ɵfac = function NgxFlickeringGridComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || NgxFlickeringGridComponent)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxFlickeringGridComponent,\n    selectors: [[\"om-flickering-grid\"]],\n    viewQuery: function NgxFlickeringGridComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.background = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvas = _t.first);\n      }\n    },\n    inputs: {\n      styleClass: \"styleClass\",\n      squareSize: \"squareSize\",\n      gridGap: \"gridGap\",\n      flickerChance: \"flickerChance\",\n      color: \"color\",\n      maxOpacity: \"maxOpacity\"\n    },\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    ngContentSelectors: _c2,\n    decls: 7,\n    vars: 1,\n    consts: [[\"OmFlickeringGridBackground\", \"\"], [\"OmFlickeringGridCanvas\", \"\"], [1, \"om-flickering-grid\", 3, \"ngClass\"], [1, \"om-flickering-grid-background\"], [\"width\", \"100\", \"height\", \"100\", 1, \"om-flickering-grid-canvas\"], [1, \"om-flickering-grid-content\"]],\n    template: function NgxFlickeringGridComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\", 2)(1, \"div\", 3, 0);\n        i0.ɵɵelement(3, \"canvas\", 4, 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 5);\n        i0.ɵɵprojection(6);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", ctx.styleClass);\n      }\n    },\n    dependencies: [CommonModule, i1.NgClass],\n    styles: [\".om-flickering-grid[_ngcontent-%COMP%]{position:relative;width:100%;height:100%}.om-flickering-grid[_ngcontent-%COMP%]   .om-flickering-grid-background[_ngcontent-%COMP%]{position:absolute;width:100%;height:100%;pointer-events:none;overflow:hidden}.om-flickering-grid[_ngcontent-%COMP%]   .om-flickering-grid-background[_ngcontent-%COMP%]   canvas[_ngcontent-%COMP%]{pointer-events:none;z-index:0;position:absolute;inset:0}.om-flickering-grid[_ngcontent-%COMP%]   .om-flickering-grid-content[_ngcontent-%COMP%]{position:relative;z-index:1;width:100%;height:100%}\"]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxFlickeringGridComponent, [{\n    type: Component,\n    args: [{\n      selector: \"om-flickering-grid\",\n      standalone: true,\n      imports: [CommonModule],\n      template: \"<div class=\\\"om-flickering-grid\\\" [ngClass]=\\\"styleClass\\\">\\r\\n    <div class=\\\"om-flickering-grid-background\\\" #OmFlickeringGridBackground>\\r\\n        <canvas class=\\\"om-flickering-grid-canvas\\\" width=\\\"100\\\" height=\\\"100\\\" #OmFlickeringGridCanvas></canvas>\\r\\n    </div>\\r\\n    <div class=\\\"om-flickering-grid-content\\\">\\r\\n        <ng-content></ng-content>\\r\\n    </div>\\r\\n</div>\",\n      styles: [\".om-flickering-grid{position:relative;width:100%;height:100%}.om-flickering-grid .om-flickering-grid-background{position:absolute;width:100%;height:100%;pointer-events:none;overflow:hidden}.om-flickering-grid .om-flickering-grid-background canvas{pointer-events:none;z-index:0;position:absolute;inset:0}.om-flickering-grid .om-flickering-grid-content{position:relative;z-index:1;width:100%;height:100%}\\n\"]\n    }]\n  }], null, {\n    background: [{\n      type: ViewChild,\n      args: [\"OmFlickeringGridBackground\"]\n    }],\n    canvas: [{\n      type: ViewChild,\n      args: [\"OmFlickeringGridCanvas\"]\n    }],\n    styleClass: [{\n      type: Input,\n      args: [\"styleClass\"]\n    }],\n    squareSize: [{\n      type: Input,\n      args: [\"squareSize\"]\n    }],\n    gridGap: [{\n      type: Input,\n      args: [\"gridGap\"]\n    }],\n    flickerChance: [{\n      type: Input,\n      args: [\"flickerChance\"]\n    }],\n    color: [{\n      type: Input,\n      args: [\"color\"]\n    }],\n    maxOpacity: [{\n      type: Input,\n      args: [\"maxOpacity\"]\n    }]\n  });\n})();\n\n/*\n * Public API Surface of ngx-flickering-grid\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxFlickeringGridComponent };\n"],
  "mappings": "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",
  "names": ["time"]
}
